(function() {
  var SPECIAL_CSS_FILE_NAME, address, config, cssFile, currentFile, fs, lessFile, lines, name, outputCSSFile, outputFile, page, param, programDir, startTime, system, val, value, _i, _len, _ref, _ref2;

  system = require('system');

  fs = require('fs');

  page = require("webpage").create();

  page.onConsoleMessage = function(msg, line, source) {
    return console.log("console> " + msg);
  };

  if (system.args.length < 5) {
    console.error("This program takes exactly 4 arguments:");
    console.error("CSS/LESS file (for example '/home/my-home/style.css)");
    console.error("Absolute path to html file (for example '/home/my-home/file.xhtml)");
    console.error("Output (X)HTML file");
    console.error("Output CSS file");
    console.error("Additional config params passed to the EpubCSS constructor:");
    console.error("  debug=true");
    console.error("  autogenerateClasses=false");
    phantom.exit(1);
  }

  programDir = system.args[0].replace(/\/[^\/]*$/, '');

  cssFile = system.args[1];

  address = system.args[2];

  if (address[0] !== '/') {
    console.error("Path to HTML file does not seem to be an absolute path. For now it needs to start with a '/'");
    phantom.exit(1);
  }

  address = "file://" + address;

  outputFile = fs.open(system.args[3], 'w');

  SPECIAL_CSS_FILE_NAME = '__AUTOGENERATED_CSS_FILE';

  outputCSSFile = fs.open(system.args[4], 'w');

  config = {};

  if (system.args.length > 5) {
    _ref = system.args.slice(5);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      param = _ref[_i];
      _ref2 = param.split('='), name = _ref2[0], value = _ref2[1];
      val = value === 'true';
      config[name] = val;
    }
  }

  currentFile = {
    file: outputFile,
    name: 'Output HTML'
  };

  lines = 0;

  page.onAlert = function(msg) {
    if (lines++ % 100000 === 0) {
      console.log("Outputting " + currentFile.name + " ...");
      lines = lines % 100000;
    }
    return currentFile.file.write(msg);
  };

  page.onConfirm = function(fileName) {
    currentFile.file.close();
    if (fileName.indexOf('__PhantomJS_FINISHED' >= 0)) {
      console.log('PhantomJS finally Finished!');
      phantom.exit();
    }
    if (fileName.indexOf('__PhantomJS_FAILED' >= 0)) {
      console.log('PhantomJS FAILED! Good luck debugging that');
      phantom.exit(1);
    }
    if (fileName.indexOf(SPECIAL_CSS_FILE_NAME >= 0)) {
      currentFile.file = outputCSSFile;
      currentFile.name = "Autogenerated CSS file";
    }
    currentFile.file = fs.open('tempdir/' + fileName, 'w');
    currentFile.name = fileName;
    lines = 0;
    return true;
  };

  console.log("Reading CSS file at: " + cssFile);

  lessFile = fs.read(cssFile, 'utf-8');

  console.log("Opening page at: " + address);

  startTime = new Date().getTime();

  page.open(encodeURI(address), function(status) {
    var loadScript, needToKeepWaiting;
    if (status !== 'success') {
      console.error("File not FOUND!!");
      phantom.exit(1);
    }
    console.log("Loaded? " + status + ". Took " + (((new Date().getTime()) - startTime) / 1000) + "s");
    loadScript = function(path) {
      if (page.injectJs(path)) {} else {
        console.error("Could not find " + path);
        return phantom.exit(1);
      }
    };
    loadScript(fs.workingDirectory + '/' + programDir + '/lib/jquery.js');
    loadScript(fs.workingDirectory + '/' + programDir + '/lib/less-1.3.0.js');
    loadScript(fs.workingDirectory + '/' + programDir + '/custom.js');
    loadScript(fs.workingDirectory + '/' + programDir + '/epubcss.js');
    loadScript(fs.workingDirectory + '/' + programDir + '/lib/dom-to-xhtml.js');
    needToKeepWaiting = page.evaluate(function(lessFile, config, SPECIAL_CSS_FILE_NAME) {
      var $math, callback;
      callback = function() {
        var $nodes, aryHack, files, name, newCSS, parser, _ref3, _results;
        parser = new window.EpubCSS(config);
        _ref3 = parser.emulate(lessFile), newCSS = _ref3.css, files = _ref3.files;
        console.log('Serializing (X)HTML back out from WebKit...');
        aryHack = {
          push: function(str) {
            return alert(str);
          }
        };
        alert('<html xmlns="http://www.w3.org/1999/xhtml">');
        window.dom2xhtml.serialize($('body')[0], aryHack);
        alert('</html>');
        confirm(SPECIAL_CSS_FILE_NAME);
        alert(newCSS);
        _results = [];
        for (name in files) {
          $nodes = files[name];
          confirm(name);
          alert('<html xmlns="http://www.w3.org/1999/xhtml">');
          alert('<head><link rel="stylesheet" href="style.css"/></head>');
          $nodes.each(function() {
            return window.dom2xhtml.serialize($(this)[0], aryHack);
          });
          _results.push(alert('</html>'));
        }
        return _results;
      };
      $math = $('math');
      if ($math.length) {
        console.log("This document has " + $math.length + " elements. I hope you got MathJax working because I'm going to wait indefinitely if you didn't!");
        try {
          return MathJax.Hub.Queue(function() {
            callback();
            return confirm('__PhantomJS_FINISHED');
          });
        } catch (e) {
          return confirm('__PhantomJS_FAILED');
        }
      }
    }, lessFile, config, SPECIAL_CSS_FILE_NAME);
    if (!needToKeepWaiting) {
      currentFile.file.close();
      return phantom.exit();
    }
  });

}).call(this);
